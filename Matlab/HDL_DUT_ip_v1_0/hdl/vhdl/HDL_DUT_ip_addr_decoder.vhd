-- -------------------------------------------------------------
-- 
-- File Name: hdl_prj2\hdlsrc\untitled\HDL_DUT_ip_addr_decoder.vhd
-- Created: 2023-07-05 15:31:50
-- 
-- Generated by MATLAB 9.8 and HDL Coder 3.16
-- 
-- -------------------------------------------------------------


-- -------------------------------------------------------------
-- 
-- Module: HDL_DUT_ip_addr_decoder
-- Source Path: HDL_DUT_ip/HDL_DUT_ip_axi_lite/HDL_DUT_ip_addr_decoder
-- Hierarchy Level: 2
-- 
-- -------------------------------------------------------------
LIBRARY IEEE;
USE IEEE.std_logic_1164.ALL;
USE IEEE.numeric_std.ALL;

ENTITY HDL_DUT_ip_addr_decoder IS
  PORT( clk                               :   IN    std_logic;
        reset                             :   IN    std_logic;
        data_write                        :   IN    std_logic_vector(31 DOWNTO 0);  -- ufix32
        addr_sel                          :   IN    std_logic_vector(13 DOWNTO 0);  -- ufix14
        wr_enb                            :   IN    std_logic;  -- ufix1
        rd_enb                            :   IN    std_logic;  -- ufix1
        read_ip_timestamp                 :   IN    std_logic_vector(31 DOWNTO 0);  -- ufix32
        read_out                          :   IN    std_logic_vector(10 DOWNTO 0);  -- ufix11
        data_read                         :   OUT   std_logic_vector(31 DOWNTO 0);  -- ufix32
        write_in1                         :   OUT   std_logic_vector(3 DOWNTO 0);  -- ufix4
        write_in2                         :   OUT   std_logic_vector(9 DOWNTO 0)  -- ufix10
        );
END HDL_DUT_ip_addr_decoder;


ARCHITECTURE rtl OF HDL_DUT_ip_addr_decoder IS

  -- Signals
  SIGNAL enb                              : std_logic;
  SIGNAL addr_sel_unsigned                : unsigned(13 DOWNTO 0);  -- ufix14
  SIGNAL decode_sel_ip_timestamp_1_1      : std_logic;  -- ufix1
  SIGNAL read_ip_timestamp_unsigned       : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL const_1                          : std_logic;  -- ufix1
  SIGNAL read_out_unsigned                : unsigned(10 DOWNTO 0);  -- ufix11
  SIGNAL decode_sel_out_1_1               : std_logic;  -- ufix1
  SIGNAL const_0                          : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL read_reg_ip_timestamp            : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL decode_rd_ip_timestamp_1_1       : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL read_reg_out                     : unsigned(10 DOWNTO 0);  -- ufix11
  SIGNAL data_slice_out_1                 : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL decode_rd_out_1_1                : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL decode_sel_in1_1_1               : std_logic;  -- ufix1
  SIGNAL reg_enb_in1_1_1                  : std_logic;  -- ufix1
  SIGNAL data_write_unsigned              : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL data_in_in1                      : unsigned(3 DOWNTO 0);  -- ufix4
  SIGNAL data_reg_in1_1_1                 : unsigned(3 DOWNTO 0);  -- ufix4
  SIGNAL decode_sel_in2_1_1               : std_logic;  -- ufix1
  SIGNAL reg_enb_in2_1_1                  : std_logic;  -- ufix1
  SIGNAL data_in_in2                      : unsigned(9 DOWNTO 0);  -- ufix10
  SIGNAL data_reg_in2_1_1                 : unsigned(9 DOWNTO 0);  -- ufix10

BEGIN
  addr_sel_unsigned <= unsigned(addr_sel);

  
  decode_sel_ip_timestamp_1_1 <= '1' WHEN addr_sel_unsigned = to_unsigned(16#0002#, 14) ELSE
      '0';

  read_ip_timestamp_unsigned <= unsigned(read_ip_timestamp);

  const_1 <= '1';

  enb <= const_1;

  read_out_unsigned <= unsigned(read_out);

  
  decode_sel_out_1_1 <= '1' WHEN addr_sel_unsigned = to_unsigned(16#0042#, 14) ELSE
      '0';

  const_0 <= to_unsigned(0, 32);

  reg_ip_timestamp_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      read_reg_ip_timestamp <= to_unsigned(0, 32);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        read_reg_ip_timestamp <= read_ip_timestamp_unsigned;
      END IF;
    END IF;
  END PROCESS reg_ip_timestamp_process;


  
  decode_rd_ip_timestamp_1_1 <= const_0 WHEN decode_sel_ip_timestamp_1_1 = '0' ELSE
      read_reg_ip_timestamp;

  reg_out_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      read_reg_out <= to_unsigned(16#000#, 11);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        read_reg_out <= read_out_unsigned;
      END IF;
    END IF;
  END PROCESS reg_out_process;


  data_slice_out_1 <= resize(read_reg_out, 32);

  
  decode_rd_out_1_1 <= decode_rd_ip_timestamp_1_1 WHEN decode_sel_out_1_1 = '0' ELSE
      data_slice_out_1;

  data_read <= std_logic_vector(decode_rd_out_1_1);

  
  decode_sel_in1_1_1 <= '1' WHEN addr_sel_unsigned = to_unsigned(16#0040#, 14) ELSE
      '0';

  reg_enb_in1_1_1 <= decode_sel_in1_1_1 AND wr_enb;

  data_write_unsigned <= unsigned(data_write);

  data_in_in1 <= data_write_unsigned(3 DOWNTO 0);

  reg_in1_1_1_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      data_reg_in1_1_1 <= to_unsigned(16#0#, 4);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' AND reg_enb_in1_1_1 = '1' THEN
        data_reg_in1_1_1 <= data_in_in1;
      END IF;
    END IF;
  END PROCESS reg_in1_1_1_process;


  write_in1 <= std_logic_vector(data_reg_in1_1_1);

  
  decode_sel_in2_1_1 <= '1' WHEN addr_sel_unsigned = to_unsigned(16#0041#, 14) ELSE
      '0';

  reg_enb_in2_1_1 <= decode_sel_in2_1_1 AND wr_enb;

  data_in_in2 <= data_write_unsigned(9 DOWNTO 0);

  reg_in2_1_1_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      data_reg_in2_1_1 <= to_unsigned(16#000#, 10);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' AND reg_enb_in2_1_1 = '1' THEN
        data_reg_in2_1_1 <= data_in_in2;
      END IF;
    END IF;
  END PROCESS reg_in2_1_1_process;


  write_in2 <= std_logic_vector(data_reg_in2_1_1);

END rtl;

