-- -------------------------------------------------------------
-- 
-- File Name: D:\Projects\Matlab\IPcores\test\hdlsrc\hdlcoderFocCurrentFixptHdl\FOC_Curre_ip_src_FOC_Current_Control.vhd
-- Created: 2023-12-01 13:24:03
-- 
-- Generated by MATLAB 9.8 and HDL Coder 3.16
-- 
-- 
-- -------------------------------------------------------------
-- Rate and Clocking Details
-- -------------------------------------------------------------
-- Model base rate: 2e-05
-- Target subsystem base rate: 2e-05
-- 
-- 
-- Clock Enable  Sample Time
-- -------------------------------------------------------------
-- ce_out        2e-05
-- -------------------------------------------------------------
-- 
-- 
-- Output Signal                 Clock Enable  Sample Time
-- -------------------------------------------------------------
-- Phase_Voltage_0               ce_out        2e-05
-- Phase_Voltage_1               ce_out        2e-05
-- Phase_Voltage_2               ce_out        2e-05
-- -------------------------------------------------------------
-- 
-- -------------------------------------------------------------


-- -------------------------------------------------------------
-- 
-- Module: FOC_Curre_ip_src_FOC_Current_Control
-- Source Path: hdlcoderFocCurrentFixptHdl/FOC_Current_Control
-- Hierarchy Level: 0
-- 
-- -------------------------------------------------------------
LIBRARY IEEE;
USE IEEE.std_logic_1164.ALL;
USE IEEE.numeric_std.ALL;
USE work.FOC_Curre_ip_src_FOC_Current_Control_pkg.ALL;

ENTITY FOC_Curre_ip_src_FOC_Current_Control IS
  PORT( clk                               :   IN    std_logic;
        reset                             :   IN    std_logic;
        clk_enable                        :   IN    std_logic;
        Current_Command                   :   IN    std_logic_vector(15 DOWNTO 0);  -- sfix16_En12
        Phase_Current_0                   :   IN    std_logic_vector(15 DOWNTO 0);  -- sfix16_En12
        Phase_Current_1                   :   IN    std_logic_vector(15 DOWNTO 0);  -- sfix16_En12
        Electrical_Position               :   IN    std_logic_vector(15 DOWNTO 0);  -- sfix16_En12
        paramCurrentControlI              :   IN    std_logic_vector(15 DOWNTO 0);  -- sfix16_En3 Tunable port
        paramCurrentControlP              :   IN    std_logic_vector(15 DOWNTO 0);  -- sfix16_En8 Tunable port
        ce_out                            :   OUT   std_logic;
        Phase_Voltage_0                   :   OUT   std_logic_vector(15 DOWNTO 0);  -- sfix16_En8
        Phase_Voltage_1                   :   OUT   std_logic_vector(15 DOWNTO 0);  -- sfix16_En8
        Phase_Voltage_2                   :   OUT   std_logic_vector(15 DOWNTO 0)  -- sfix16_En8
        );
END FOC_Curre_ip_src_FOC_Current_Control;


ARCHITECTURE rtl OF FOC_Curre_ip_src_FOC_Current_Control IS

  -- Component Declarations
  COMPONENT FOC_Curre_ip_src_Clarke_Transform
    PORT( ABC_0                           :   IN    std_logic_vector(15 DOWNTO 0);  -- sfix16_En12
          ABC_1                           :   IN    std_logic_vector(15 DOWNTO 0);  -- sfix16_En12
          Alpha                           :   OUT   std_logic_vector(15 DOWNTO 0);  -- sfix16_En11
          Beta                            :   OUT   std_logic_vector(15 DOWNTO 0)  -- sfix16_En11
          );
  END COMPONENT;

  COMPONENT FOC_Curre_ip_src_Sine_Cosine
    PORT( P                               :   IN    std_logic_vector(15 DOWNTO 0);  -- sfix16_En12
          Sin                             :   OUT   std_logic_vector(15 DOWNTO 0);  -- sfix16_En14
          Cos                             :   OUT   std_logic_vector(15 DOWNTO 0)  -- sfix16_En14
          );
  END COMPONENT;

  COMPONENT FOC_Curre_ip_src_Park_Transform
    PORT( Alpha                           :   IN    std_logic_vector(15 DOWNTO 0);  -- sfix16_En11
          Beta                            :   IN    std_logic_vector(15 DOWNTO 0);  -- sfix16_En11
          Sin_Coefficient                 :   IN    std_logic_vector(15 DOWNTO 0);  -- sfix16_En14
          Cos_Coefficient                 :   IN    std_logic_vector(15 DOWNTO 0);  -- sfix16_En14
          D                               :   OUT   std_logic_vector(31 DOWNTO 0);  -- sfix32_En27
          Q                               :   OUT   std_logic_vector(31 DOWNTO 0)  -- sfix32_En27
          );
  END COMPONENT;

  COMPONENT FOC_Curre_ip_src_DQ_Current_Control
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          Q_Command                       :   IN    std_logic_vector(15 DOWNTO 0);  -- sfix16_En12
          D_Current                       :   IN    std_logic_vector(31 DOWNTO 0);  -- sfix32_En27
          Q_Current                       :   IN    std_logic_vector(31 DOWNTO 0);  -- sfix32_En27
          paramCurrentControlI            :   IN    std_logic_vector(15 DOWNTO 0);  -- sfix16_En3
          paramCurrentControlP            :   IN    std_logic_vector(15 DOWNTO 0);  -- sfix16_En8
          D_Voltage                       :   OUT   std_logic_vector(15 DOWNTO 0);  -- sfix16_En11
          Q_Voltage                       :   OUT   std_logic_vector(15 DOWNTO 0)  -- sfix16_En11
          );
  END COMPONENT;

  COMPONENT FOC_Curre_ip_src_Inverse_Park_Transform
    PORT( D                               :   IN    std_logic_vector(15 DOWNTO 0);  -- sfix16_En11
          Q                               :   IN    std_logic_vector(15 DOWNTO 0);  -- sfix16_En11
          Sin_Coefficient                 :   IN    std_logic_vector(15 DOWNTO 0);  -- sfix16_En14
          Cos_Coefficient                 :   IN    std_logic_vector(15 DOWNTO 0);  -- sfix16_En14
          Alpha                           :   OUT   std_logic_vector(15 DOWNTO 0);  -- sfix16_En10
          Beta                            :   OUT   std_logic_vector(15 DOWNTO 0)  -- sfix16_En10
          );
  END COMPONENT;

  COMPONENT FOC_Curre_ip_src_Inverse_Clarke_Transform
    PORT( Alpha                           :   IN    std_logic_vector(15 DOWNTO 0);  -- sfix16_En10
          Beta                            :   IN    std_logic_vector(15 DOWNTO 0);  -- sfix16_En10
          ABC_0                           :   OUT   std_logic_vector(31 DOWNTO 0);  -- sfix32_En25
          ABC_1                           :   OUT   std_logic_vector(31 DOWNTO 0);  -- sfix32_En25
          ABC_2                           :   OUT   std_logic_vector(31 DOWNTO 0)  -- sfix32_En25
          );
  END COMPONENT;

  COMPONENT FOC_Curre_ip_src_Space_Vector_Modulation
    PORT( ABC_0                           :   IN    std_logic_vector(31 DOWNTO 0);  -- sfix32_En25
          ABC_1                           :   IN    std_logic_vector(31 DOWNTO 0);  -- sfix32_En25
          ABC_2                           :   IN    std_logic_vector(31 DOWNTO 0);  -- sfix32_En25
          ABC_SVM_0                       :   OUT   std_logic_vector(15 DOWNTO 0);  -- sfix16_En8
          ABC_SVM_1                       :   OUT   std_logic_vector(15 DOWNTO 0);  -- sfix16_En8
          ABC_SVM_2                       :   OUT   std_logic_vector(15 DOWNTO 0)  -- sfix16_En8
          );
  END COMPONENT;

  -- Component Configuration Statements
  FOR ALL : FOC_Curre_ip_src_Clarke_Transform
    USE ENTITY work.FOC_Curre_ip_src_Clarke_Transform(rtl);

  FOR ALL : FOC_Curre_ip_src_Sine_Cosine
    USE ENTITY work.FOC_Curre_ip_src_Sine_Cosine(rtl);

  FOR ALL : FOC_Curre_ip_src_Park_Transform
    USE ENTITY work.FOC_Curre_ip_src_Park_Transform(rtl);

  FOR ALL : FOC_Curre_ip_src_DQ_Current_Control
    USE ENTITY work.FOC_Curre_ip_src_DQ_Current_Control(rtl);

  FOR ALL : FOC_Curre_ip_src_Inverse_Park_Transform
    USE ENTITY work.FOC_Curre_ip_src_Inverse_Park_Transform(rtl);

  FOR ALL : FOC_Curre_ip_src_Inverse_Clarke_Transform
    USE ENTITY work.FOC_Curre_ip_src_Inverse_Clarke_Transform(rtl);

  FOR ALL : FOC_Curre_ip_src_Space_Vector_Modulation
    USE ENTITY work.FOC_Curre_ip_src_Space_Vector_Modulation(rtl);

  -- Signals
  SIGNAL enb                              : std_logic;
  SIGNAL alphaCurrent                     : std_logic_vector(15 DOWNTO 0);  -- ufix16
  SIGNAL betaCurrent                      : std_logic_vector(15 DOWNTO 0);  -- ufix16
  SIGNAL sinCoefficient                   : std_logic_vector(15 DOWNTO 0);  -- ufix16
  SIGNAL cosCoefficient                   : std_logic_vector(15 DOWNTO 0);  -- ufix16
  SIGNAL dCurrent                         : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL qCurrent                         : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL dVoltage                         : std_logic_vector(15 DOWNTO 0);  -- ufix16
  SIGNAL qVoltage                         : std_logic_vector(15 DOWNTO 0);  -- ufix16
  SIGNAL alphaVoltage                     : std_logic_vector(15 DOWNTO 0);  -- ufix16
  SIGNAL betaVoltage                      : std_logic_vector(15 DOWNTO 0);  -- ufix16
  SIGNAL abcVoltage_1                     : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL abcVoltage_2                     : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL abcVoltage                       : vector_of_std_logic_vector32(0 TO 2);  -- ufix32 [3]
  SIGNAL abcVoltage_3                     : vector_of_signed32(0 TO 2);  -- sfix32_En25 [3]
  SIGNAL svmVoltage_0                     : std_logic_vector(15 DOWNTO 0);  -- ufix16
  SIGNAL svmVoltage_1                     : std_logic_vector(15 DOWNTO 0);  -- ufix16
  SIGNAL svmVoltage_2                     : std_logic_vector(15 DOWNTO 0);  -- ufix16
  SIGNAL svmVoltage                       : vector_of_signed16(0 TO 2);  -- sfix16_En8 [3]
  SIGNAL Delay_Register_out1              : vector_of_signed16(0 TO 2);  -- sfix16_En8 [3]

BEGIN
  u_Clarke_Transform : FOC_Curre_ip_src_Clarke_Transform
    PORT MAP( ABC_0 => Phase_Current_0,  -- sfix16_En12
              ABC_1 => Phase_Current_1,  -- sfix16_En12
              Alpha => alphaCurrent,  -- sfix16_En11
              Beta => betaCurrent  -- sfix16_En11
              );

  u_Sine_Cosine : FOC_Curre_ip_src_Sine_Cosine
    PORT MAP( P => Electrical_Position,  -- sfix16_En12
              Sin => sinCoefficient,  -- sfix16_En14
              Cos => cosCoefficient  -- sfix16_En14
              );

  u_Park_Transform : FOC_Curre_ip_src_Park_Transform
    PORT MAP( Alpha => alphaCurrent,  -- sfix16_En11
              Beta => betaCurrent,  -- sfix16_En11
              Sin_Coefficient => sinCoefficient,  -- sfix16_En14
              Cos_Coefficient => cosCoefficient,  -- sfix16_En14
              D => dCurrent,  -- sfix32_En27
              Q => qCurrent  -- sfix32_En27
              );

  u_DQ_Current_Control : FOC_Curre_ip_src_DQ_Current_Control
    PORT MAP( clk => clk,
              reset => reset,
              enb => clk_enable,
              Q_Command => Current_Command,  -- sfix16_En12
              D_Current => dCurrent,  -- sfix32_En27
              Q_Current => qCurrent,  -- sfix32_En27
              paramCurrentControlI => paramCurrentControlI,  -- sfix16_En3
              paramCurrentControlP => paramCurrentControlP,  -- sfix16_En8
              D_Voltage => dVoltage,  -- sfix16_En11
              Q_Voltage => qVoltage  -- sfix16_En11
              );

  u_Inverse_Park_Transform : FOC_Curre_ip_src_Inverse_Park_Transform
    PORT MAP( D => dVoltage,  -- sfix16_En11
              Q => qVoltage,  -- sfix16_En11
              Sin_Coefficient => sinCoefficient,  -- sfix16_En14
              Cos_Coefficient => cosCoefficient,  -- sfix16_En14
              Alpha => alphaVoltage,  -- sfix16_En10
              Beta => betaVoltage  -- sfix16_En10
              );

  u_Inverse_Clarke_Transform : FOC_Curre_ip_src_Inverse_Clarke_Transform
    PORT MAP( Alpha => alphaVoltage,  -- sfix16_En10
              Beta => betaVoltage,  -- sfix16_En10
              ABC_0 => abcVoltage(0),  -- sfix32_En25
              ABC_1 => abcVoltage_1,  -- sfix32_En25
              ABC_2 => abcVoltage_2  -- sfix32_En25
              );

  u_Space_Vector_Modulation : FOC_Curre_ip_src_Space_Vector_Modulation
    PORT MAP( ABC_0 => std_logic_vector(abcVoltage_3(0)),  -- sfix32_En25
              ABC_1 => abcVoltage_1,  -- sfix32_En25
              ABC_2 => abcVoltage_2,  -- sfix32_En25
              ABC_SVM_0 => svmVoltage_0,  -- sfix16_En8
              ABC_SVM_1 => svmVoltage_1,  -- sfix16_En8
              ABC_SVM_2 => svmVoltage_2  -- sfix16_En8
              );

  abcVoltage(1) <= abcVoltage_1;
  abcVoltage(2) <= abcVoltage_2;

  outputgen: FOR k IN 0 TO 2 GENERATE
    abcVoltage_3(k) <= signed(abcVoltage(k));
  END GENERATE;

  svmVoltage(0) <= signed(svmVoltage_0);
  svmVoltage(1) <= signed(svmVoltage_1);
  svmVoltage(2) <= signed(svmVoltage_2);

  enb <= clk_enable;

  Delay_Register_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay_Register_out1 <= (OTHERS => to_signed(16#0000#, 16));
      ELSIF enb = '1' THEN
        Delay_Register_out1 <= svmVoltage;
      END IF;
    END IF;
  END PROCESS Delay_Register_process;


  Phase_Voltage_0 <= std_logic_vector(Delay_Register_out1(0));

  Phase_Voltage_1 <= std_logic_vector(Delay_Register_out1(1));

  Phase_Voltage_2 <= std_logic_vector(Delay_Register_out1(2));

  ce_out <= clk_enable;

END rtl;

