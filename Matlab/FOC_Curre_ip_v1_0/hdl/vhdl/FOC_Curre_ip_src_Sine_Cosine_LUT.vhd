-- -------------------------------------------------------------
-- 
-- File Name: D:\Projects\Matlab\IPcores\test\hdlsrc\hdlcoderFocCurrentFixptHdl\FOC_Curre_ip_src_Sine_Cosine_LUT.vhd
-- Created: 2023-12-01 13:24:03
-- 
-- Generated by MATLAB 9.8 and HDL Coder 3.16
-- 
-- -------------------------------------------------------------


-- -------------------------------------------------------------
-- 
-- Module: FOC_Curre_ip_src_Sine_Cosine_LUT
-- Source Path: hdlcoderFocCurrentFixptHdl/FOC_Current_Control/Sine_Cosine/Sine_Cosine_LUT
-- Hierarchy Level: 2
-- 
-- -------------------------------------------------------------
LIBRARY IEEE;
USE IEEE.std_logic_1164.ALL;
USE IEEE.numeric_std.ALL;
USE work.FOC_Curre_ip_src_FOC_Current_Control_pkg.ALL;

ENTITY FOC_Curre_ip_src_Sine_Cosine_LUT IS
  PORT( u                                 :   IN    std_logic_vector(31 DOWNTO 0);  -- sfix32_En30
        sin_2_pi_u                        :   OUT   std_logic_vector(15 DOWNTO 0);  -- sfix16_En14
        cos_2_pi_u                        :   OUT   std_logic_vector(15 DOWNTO 0)  -- sfix16_En14
        );
END FOC_Curre_ip_src_Sine_Cosine_LUT;


ARCHITECTURE rtl OF FOC_Curre_ip_src_Sine_Cosine_LUT IS

  -- Constants
  CONSTANT Look_Up_Table_data             : vector_of_signed16(0 TO 32) := 
    (to_signed(16#0000#, 16), to_signed(16#0324#, 16), to_signed(16#0646#, 16), to_signed(16#0964#, 16),
     to_signed(16#0C7C#, 16), to_signed(16#0F8D#, 16), to_signed(16#1294#, 16), to_signed(16#1590#, 16),
     to_signed(16#187E#, 16), to_signed(16#1B5D#, 16), to_signed(16#1E2B#, 16), to_signed(16#20E7#, 16),
     to_signed(16#238E#, 16), to_signed(16#2620#, 16), to_signed(16#289A#, 16), to_signed(16#2AFB#, 16),
     to_signed(16#2D41#, 16), to_signed(16#2F6C#, 16), to_signed(16#3179#, 16), to_signed(16#3368#, 16),
     to_signed(16#3537#, 16), to_signed(16#36E5#, 16), to_signed(16#3871#, 16), to_signed(16#39DB#, 16),
     to_signed(16#3B21#, 16), to_signed(16#3C42#, 16), to_signed(16#3D3F#, 16), to_signed(16#3E15#, 16),
     to_signed(16#3EC5#, 16), to_signed(16#3F4F#, 16), to_signed(16#3FB1#, 16), to_signed(16#3FEC#, 16),
     to_signed(16#4000#, 16));  -- sfix16 [33]
  CONSTANT Look_Up_Table_data_2           : vector_of_signed16(0 TO 32) := 
    (to_signed(16#0000#, 16), to_signed(16#0324#, 16), to_signed(16#0646#, 16), to_signed(16#0964#, 16),
     to_signed(16#0C7C#, 16), to_signed(16#0F8D#, 16), to_signed(16#1294#, 16), to_signed(16#1590#, 16),
     to_signed(16#187E#, 16), to_signed(16#1B5D#, 16), to_signed(16#1E2B#, 16), to_signed(16#20E7#, 16),
     to_signed(16#238E#, 16), to_signed(16#2620#, 16), to_signed(16#289A#, 16), to_signed(16#2AFB#, 16),
     to_signed(16#2D41#, 16), to_signed(16#2F6C#, 16), to_signed(16#3179#, 16), to_signed(16#3368#, 16),
     to_signed(16#3537#, 16), to_signed(16#36E5#, 16), to_signed(16#3871#, 16), to_signed(16#39DB#, 16),
     to_signed(16#3B21#, 16), to_signed(16#3C42#, 16), to_signed(16#3D3F#, 16), to_signed(16#3E15#, 16),
     to_signed(16#3EC5#, 16), to_signed(16#3F4F#, 16), to_signed(16#3FB1#, 16), to_signed(16#3FEC#, 16),
     to_signed(16#4000#, 16));  -- sfix16 [33]

  -- Signals
  SIGNAL u_signed                         : signed(31 DOWNTO 0);  -- sfix32_En30
  SIGNAL CastU16En16_out1                 : unsigned(15 DOWNTO 0);  -- ufix16_En16
  SIGNAL Point50_out1                     : unsigned(15 DOWNTO 0);  -- ufix16_En16
  SIGNAL LTEp50_relop1                    : std_logic;
  SIGNAL Amp50_sub_cast                   : signed(16 DOWNTO 0);  -- sfix17_En16
  SIGNAL Amp50_sub_cast_1                 : signed(16 DOWNTO 0);  -- sfix17_En16
  SIGNAL Amp50_out1                       : signed(16 DOWNTO 0);  -- sfix17_En16
  SIGNAL CastU16En16_out1_dtc             : signed(16 DOWNTO 0);  -- sfix17_En16
  SIGNAL QuadHandle1_out1                 : signed(16 DOWNTO 0);  -- sfix17_En16
  SIGNAL Point25_out1                     : unsigned(15 DOWNTO 0);  -- ufix16_En16
  SIGNAL LTEp25_1_cast                    : signed(16 DOWNTO 0);  -- sfix17_En16
  SIGNAL LTEp25_relop1                    : std_logic;
  SIGNAL p50mA_sub_cast                   : signed(17 DOWNTO 0);  -- sfix18_En16
  SIGNAL p50mA_sub_cast_1                 : signed(17 DOWNTO 0);  -- sfix18_En16
  SIGNAL p50mA_out1                       : signed(17 DOWNTO 0);  -- sfix18_En16
  SIGNAL QuadHandle1_out1_dtc             : signed(17 DOWNTO 0);  -- sfix18_En16
  SIGNAL QuadHandle2_out1                 : signed(17 DOWNTO 0);  -- sfix18_En16
  SIGNAL Look_Up_Table_out1               : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL Negate_cast                      : signed(16 DOWNTO 0);  -- sfix17_En14
  SIGNAL Negate_cast_1                    : signed(16 DOWNTO 0);  -- sfix17_En14
  SIGNAL Negate_out1                      : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL SignCorrected_out1               : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL CastU16En16_out1_1               : unsigned(15 DOWNTO 0);  -- ufix16_En16
  SIGNAL Point25_out1_1                   : unsigned(15 DOWNTO 0);  -- ufix16_En16
  SIGNAL LTEp25_relop1_1                  : std_logic;
  SIGNAL Point75_out1                     : unsigned(15 DOWNTO 0);  -- ufix16_En16
  SIGNAL GTEp75_relop1                    : std_logic;
  SIGNAL alpha1st_or_4th_Quad_bool        : std_logic;
  SIGNAL alpha1st_or_4th_Quad_out1        : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL Point50_out1_1                   : unsigned(15 DOWNTO 0);  -- ufix16_En16
  SIGNAL LTEp50_relop1_1                  : std_logic;
  SIGNAL p75mA_sub_cast                   : signed(16 DOWNTO 0);  -- sfix17_En16
  SIGNAL p75mA_sub_cast_1                 : signed(16 DOWNTO 0);  -- sfix17_En16
  SIGNAL p75mA_out1                       : signed(16 DOWNTO 0);  -- sfix17_En16
  SIGNAL Amp75_sub_cast                   : signed(16 DOWNTO 0);  -- sfix17_En16
  SIGNAL Amp75_sub_cast_1                 : signed(16 DOWNTO 0);  -- sfix17_En16
  SIGNAL Amp75_out1                       : signed(16 DOWNTO 0);  -- sfix17_En16
  SIGNAL QuadHandle1b_out1                : signed(16 DOWNTO 0);  -- sfix17_En16
  SIGNAL Amp25_sub_cast                   : signed(16 DOWNTO 0);  -- sfix17_En16
  SIGNAL Amp25_sub_cast_1                 : signed(16 DOWNTO 0);  -- sfix17_En16
  SIGNAL Amp25_out1                       : signed(16 DOWNTO 0);  -- sfix17_En16
  SIGNAL p25mA_sub_cast                   : signed(16 DOWNTO 0);  -- sfix17_En16
  SIGNAL p25mA_sub_cast_1                 : signed(16 DOWNTO 0);  -- sfix17_En16
  SIGNAL p25mA_out1                       : signed(16 DOWNTO 0);  -- sfix17_En16
  SIGNAL QuadHandle1a_out1                : signed(16 DOWNTO 0);  -- sfix17_En16
  SIGNAL QuadHandle2_out1_1               : signed(16 DOWNTO 0);  -- sfix17_En16
  SIGNAL Look_Up_Table_out1_1             : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL Negate_cast_2                    : signed(16 DOWNTO 0);  -- sfix17_En14
  SIGNAL Negate_cast_3                    : signed(16 DOWNTO 0);  -- sfix17_En14
  SIGNAL Negate_out1_1                    : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL SignCorrected_out1_1             : signed(15 DOWNTO 0);  -- sfix16_En14

BEGIN
  u_signed <= signed(u);

  CastU16En16_out1 <= unsigned(u_signed(29 DOWNTO 14));

  Point50_out1 <= to_unsigned(16#8000#, 16);

  
  LTEp50_relop1 <= '1' WHEN CastU16En16_out1 <= Point50_out1 ELSE
      '0';

  Amp50_sub_cast <= signed(resize(CastU16En16_out1, 17));
  Amp50_sub_cast_1 <= signed(resize(Point50_out1, 17));
  Amp50_out1 <= Amp50_sub_cast - Amp50_sub_cast_1;

  CastU16En16_out1_dtc <= signed(resize(CastU16En16_out1, 17));

  
  QuadHandle1_out1 <= Amp50_out1 WHEN LTEp50_relop1 = '0' ELSE
      CastU16En16_out1_dtc;

  Point25_out1 <= to_unsigned(16#4000#, 16);

  LTEp25_1_cast <= signed(resize(Point25_out1, 17));
  
  LTEp25_relop1 <= '1' WHEN QuadHandle1_out1 <= LTEp25_1_cast ELSE
      '0';

  p50mA_sub_cast <= signed(resize(Point50_out1, 18));
  p50mA_sub_cast_1 <= resize(QuadHandle1_out1, 18);
  p50mA_out1 <= p50mA_sub_cast - p50mA_sub_cast_1;

  QuadHandle1_out1_dtc <= resize(QuadHandle1_out1, 18);

  
  QuadHandle2_out1 <= p50mA_out1 WHEN LTEp25_relop1 = '0' ELSE
      QuadHandle1_out1_dtc;

  Look_Up_Table_output : PROCESS (QuadHandle2_out1)
    VARIABLE dout_low : signed(15 DOWNTO 0);
    VARIABLE k : unsigned(5 DOWNTO 0);
    VARIABLE f : unsigned(31 DOWNTO 0);
    VARIABLE in0 : signed(17 DOWNTO 0);
    VARIABLE in0_0 : signed(17 DOWNTO 0);
    VARIABLE add_cast : signed(48 DOWNTO 0);
    VARIABLE cast : signed(32 DOWNTO 0);
    VARIABLE sub_temp : signed(15 DOWNTO 0);
    VARIABLE mul_temp : signed(48 DOWNTO 0);
    VARIABLE add_cast_0 : signed(47 DOWNTO 0);
    VARIABLE add_cast_1 : signed(48 DOWNTO 0);
    VARIABLE add_temp : signed(48 DOWNTO 0);
  BEGIN
    in0 := to_signed(16#00000#, 18);
    in0_0 := to_signed(16#00000#, 18);
    IF QuadHandle2_out1 <= to_signed(16#00000#, 18) THEN 
      k := to_unsigned(16#00#, 6);
    ELSIF QuadHandle2_out1 >= to_signed(16#04000#, 18) THEN 
      k := to_unsigned(16#20#, 6);
    ELSE 
      in0 := SHIFT_RIGHT(QuadHandle2_out1, 9);
      k := unsigned(in0(5 DOWNTO 0));
    END IF;
    IF (QuadHandle2_out1 <= to_signed(16#00000#, 18)) OR (QuadHandle2_out1 >= to_signed(16#04000#, 18)) THEN 
      f := to_unsigned(0, 32);
    ELSE 
      in0_0 := QuadHandle2_out1 AND to_signed(16#001FF#, 18);
      f := unsigned(in0_0(8 DOWNTO 0) & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0');
    END IF;
    dout_low := Look_Up_Table_data(to_integer(k));
    IF k = to_unsigned(16#20#, 6) THEN 
      NULL;
    ELSE 
      k := k + to_unsigned(16#01#, 6);
    END IF;
    add_cast := resize(dout_low & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0', 49);
    cast := signed(resize(f, 33));
    sub_temp := Look_Up_Table_data(to_integer(k)) - dout_low;
    mul_temp := cast * sub_temp;
    add_cast_0 := mul_temp(47 DOWNTO 0);
    add_cast_1 := resize(add_cast_0, 49);
    add_temp := add_cast + add_cast_1;
    Look_Up_Table_out1 <= add_temp(47 DOWNTO 32);
  END PROCESS Look_Up_Table_output;


  Negate_cast <= resize(Look_Up_Table_out1, 17);
  Negate_cast_1 <=  - (Negate_cast);
  Negate_out1 <= Negate_cast_1(15 DOWNTO 0);

  
  SignCorrected_out1 <= Negate_out1 WHEN LTEp50_relop1 = '0' ELSE
      Look_Up_Table_out1;

  sin_2_pi_u <= std_logic_vector(SignCorrected_out1);

  CastU16En16_out1_1 <= unsigned(u_signed(29 DOWNTO 14));

  Point25_out1_1 <= to_unsigned(16#4000#, 16);

  
  LTEp25_relop1_1 <= '1' WHEN CastU16En16_out1_1 <= Point25_out1_1 ELSE
      '0';

  Point75_out1 <= to_unsigned(16#C000#, 16);

  
  GTEp75_relop1 <= '1' WHEN CastU16En16_out1_1 >= Point75_out1 ELSE
      '0';

  alpha1st_or_4th_Quad_bool <= LTEp25_relop1_1 OR GTEp75_relop1;

  alpha1st_or_4th_Quad_out1 <= '0' & '0' & '0' & '0' & '0' & '0' & '0' & alpha1st_or_4th_Quad_bool;

  Point50_out1_1 <= to_unsigned(16#8000#, 16);

  
  LTEp50_relop1_1 <= '1' WHEN CastU16En16_out1_1 <= Point50_out1_1 ELSE
      '0';

  p75mA_sub_cast <= signed(resize(Point75_out1, 17));
  p75mA_sub_cast_1 <= signed(resize(CastU16En16_out1_1, 17));
  p75mA_out1 <= p75mA_sub_cast - p75mA_sub_cast_1;

  Amp75_sub_cast <= signed(resize(CastU16En16_out1_1, 17));
  Amp75_sub_cast_1 <= signed(resize(Point75_out1, 17));
  Amp75_out1 <= Amp75_sub_cast - Amp75_sub_cast_1;

  
  QuadHandle1b_out1 <= p75mA_out1 WHEN GTEp75_relop1 = '0' ELSE
      Amp75_out1;

  Amp25_sub_cast <= signed(resize(CastU16En16_out1_1, 17));
  Amp25_sub_cast_1 <= signed(resize(Point25_out1_1, 17));
  Amp25_out1 <= Amp25_sub_cast - Amp25_sub_cast_1;

  p25mA_sub_cast <= signed(resize(Point25_out1_1, 17));
  p25mA_sub_cast_1 <= signed(resize(CastU16En16_out1_1, 17));
  p25mA_out1 <= p25mA_sub_cast - p25mA_sub_cast_1;

  
  QuadHandle1a_out1 <= Amp25_out1 WHEN LTEp25_relop1_1 = '0' ELSE
      p25mA_out1;

  
  QuadHandle2_out1_1 <= QuadHandle1b_out1 WHEN LTEp50_relop1_1 = '0' ELSE
      QuadHandle1a_out1;

  Look_Up_Table_1_output : PROCESS (QuadHandle2_out1_1)
    VARIABLE dout_low1 : signed(15 DOWNTO 0);
    VARIABLE k1 : unsigned(5 DOWNTO 0);
    VARIABLE f1 : unsigned(31 DOWNTO 0);
    VARIABLE in01 : signed(16 DOWNTO 0);
    VARIABLE in0_01 : signed(16 DOWNTO 0);
    VARIABLE add_cast1 : signed(48 DOWNTO 0);
    VARIABLE cast1 : signed(32 DOWNTO 0);
    VARIABLE sub_temp1 : signed(15 DOWNTO 0);
    VARIABLE mul_temp1 : signed(48 DOWNTO 0);
    VARIABLE add_cast_01 : signed(47 DOWNTO 0);
    VARIABLE add_cast_11 : signed(48 DOWNTO 0);
    VARIABLE add_temp1 : signed(48 DOWNTO 0);
  BEGIN
    in01 := to_signed(16#00000#, 17);
    in0_01 := to_signed(16#00000#, 17);
    IF QuadHandle2_out1_1 <= to_signed(16#00000#, 17) THEN 
      k1 := to_unsigned(16#00#, 6);
    ELSIF QuadHandle2_out1_1 >= to_signed(16#04000#, 17) THEN 
      k1 := to_unsigned(16#20#, 6);
    ELSE 
      in01 := SHIFT_RIGHT(QuadHandle2_out1_1, 9);
      k1 := unsigned(in01(5 DOWNTO 0));
    END IF;
    IF (QuadHandle2_out1_1 <= to_signed(16#00000#, 17)) OR (QuadHandle2_out1_1 >= to_signed(16#04000#, 17)) THEN 
      f1 := to_unsigned(0, 32);
    ELSE 
      in0_01 := QuadHandle2_out1_1 AND to_signed(16#001FF#, 17);
      f1 := unsigned(in0_01(8 DOWNTO 0) & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0');
    END IF;
    dout_low1 := Look_Up_Table_data_2(to_integer(k1));
    IF k1 = to_unsigned(16#20#, 6) THEN 
      NULL;
    ELSE 
      k1 := k1 + to_unsigned(16#01#, 6);
    END IF;
    add_cast1 := resize(dout_low1 & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0', 49);
    cast1 := signed(resize(f1, 33));
    sub_temp1 := Look_Up_Table_data_2(to_integer(k1)) - dout_low1;
    mul_temp1 := cast1 * sub_temp1;
    add_cast_01 := mul_temp1(47 DOWNTO 0);
    add_cast_11 := resize(add_cast_01, 49);
    add_temp1 := add_cast1 + add_cast_11;
    Look_Up_Table_out1_1 <= add_temp1(47 DOWNTO 32);
  END PROCESS Look_Up_Table_1_output;


  Negate_cast_2 <= resize(Look_Up_Table_out1_1, 17);
  Negate_cast_3 <=  - (Negate_cast_2);
  Negate_out1_1 <= Negate_cast_3(15 DOWNTO 0);

  
  SignCorrected_out1_1 <= Negate_out1_1 WHEN alpha1st_or_4th_Quad_out1 = to_unsigned(16#00#, 8) ELSE
      Look_Up_Table_out1_1;

  cos_2_pi_u <= std_logic_vector(SignCorrected_out1_1);

END rtl;

