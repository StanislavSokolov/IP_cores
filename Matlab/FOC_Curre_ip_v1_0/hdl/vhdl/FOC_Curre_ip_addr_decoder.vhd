-- -------------------------------------------------------------
-- 
-- File Name: D:\Projects\Matlab\IPcores\test\hdlsrc\hdlcoderFocCurrentFixptHdl\FOC_Curre_ip_addr_decoder.vhd
-- Created: 2023-12-01 13:25:45
-- 
-- Generated by MATLAB 9.8 and HDL Coder 3.16
-- 
-- -------------------------------------------------------------


-- -------------------------------------------------------------
-- 
-- Module: FOC_Curre_ip_addr_decoder
-- Source Path: FOC_Curre_ip/FOC_Curre_ip_axi_lite/FOC_Curre_ip_addr_decoder
-- Hierarchy Level: 2
-- 
-- -------------------------------------------------------------
LIBRARY IEEE;
USE IEEE.std_logic_1164.ALL;
USE IEEE.numeric_std.ALL;
USE work.FOC_Curre_ip_pkg.ALL;

ENTITY FOC_Curre_ip_addr_decoder IS
  PORT( clk                               :   IN    std_logic;
        reset                             :   IN    std_logic;
        data_write                        :   IN    std_logic_vector(31 DOWNTO 0);  -- ufix32
        addr_sel                          :   IN    std_logic_vector(13 DOWNTO 0);  -- ufix14
        wr_enb                            :   IN    std_logic;  -- ufix1
        rd_enb                            :   IN    std_logic;  -- ufix1
        read_ip_timestamp                 :   IN    std_logic_vector(31 DOWNTO 0);  -- ufix32
        read_Phase_Voltage_0              :   IN    std_logic_vector(15 DOWNTO 0);  -- sfix16_En8
        read_Phase_Voltage_1              :   IN    std_logic_vector(15 DOWNTO 0);  -- sfix16_En8
        read_Phase_Voltage_2              :   IN    std_logic_vector(15 DOWNTO 0);  -- sfix16_En8
        data_read                         :   OUT   std_logic_vector(31 DOWNTO 0);  -- ufix32
        write_axi_enable                  :   OUT   std_logic;  -- ufix1
        write_Current_Command             :   OUT   std_logic_vector(15 DOWNTO 0);  -- sfix16_En12
        write_Electrical_Position         :   OUT   std_logic_vector(15 DOWNTO 0);  -- sfix16_En12
        write_Phase_Current_0             :   OUT   std_logic_vector(15 DOWNTO 0);  -- sfix16_En12
        write_Phase_Current_1             :   OUT   std_logic_vector(15 DOWNTO 0)  -- sfix16_En12
        );
END FOC_Curre_ip_addr_decoder;


ARCHITECTURE rtl OF FOC_Curre_ip_addr_decoder IS

  -- Signals
  SIGNAL enb                              : std_logic;
  SIGNAL addr_sel_unsigned                : unsigned(13 DOWNTO 0);  -- ufix14
  SIGNAL decode_sel_ip_timestamp_1_1      : std_logic;  -- ufix1
  SIGNAL read_ip_timestamp_unsigned       : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL const_1                          : std_logic;  -- ufix1
  SIGNAL decode_sel_Phase_Voltage_1_1     : std_logic;  -- ufix1
  SIGNAL const_0                          : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL read_reg_ip_timestamp            : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL decode_rd_ip_timestamp_1_1       : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL decode_sel_Phase_Voltage         : std_logic;  -- ufix1
  SIGNAL strobe_sel_Phase_Voltage         : std_logic;  -- ufix1
  SIGNAL const_zero                       : std_logic;  -- ufix1
  SIGNAL data_write_unsigned              : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL strobe_in_Phase_Voltage          : std_logic;  -- ufix1
  SIGNAL strobe_sw_Phase_Voltage          : std_logic;  -- ufix1
  SIGNAL strobe_reg_Phase_Voltage         : std_logic;  -- ufix1
  SIGNAL read_Phase_Voltage               : vector_of_signed16(0 TO 2);  -- sfix16_En8 [3]
  SIGNAL sync_reg_Phase_Voltage           : vector_of_signed16(0 TO 2);  -- sfix16_En8 [3]
  SIGNAL dtc_cast                         : vector_of_unsigned32(0 TO 2);  -- ufix32_En8 [3]
  SIGNAL data_slice_Phase_Voltage_1       : vector_of_unsigned32(0 TO 2);  -- ufix32 [3]
  SIGNAL decode_sel_Phase_Voltage_1_2     : std_logic;  -- ufix1
  SIGNAL data_slice_Phase_Voltage_1_0     : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL decode_rd_Phase_Voltage_1_1      : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL decode_sel_Phase_Voltage_1_3     : std_logic;  -- ufix1
  SIGNAL data_slice_Phase_Voltage_1_1     : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL decode_rd_Phase_Voltage_1_2      : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL data_slice_Phase_Voltage_1_2     : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL decode_rd_Phase_Voltage_1_3      : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL decode_sel_axi_enable_1_1        : std_logic;  -- ufix1
  SIGNAL reg_enb_axi_enable_1_1           : std_logic;  -- ufix1
  SIGNAL data_in_axi_enable               : std_logic;  -- ufix1
  SIGNAL data_reg_axi_enable_1_1          : std_logic;  -- ufix1
  SIGNAL write_concats_axi_enable_1       : std_logic;  -- ufix1
  SIGNAL decode_sel_Current_Command_1_1   : std_logic;  -- ufix1
  SIGNAL reg_enb_Current_Command_1_1      : std_logic;  -- ufix1
  SIGNAL data_in_Current_Command          : signed(15 DOWNTO 0);  -- sfix16_En12
  SIGNAL data_reg_Current_Command_1_1     : signed(15 DOWNTO 0);  -- sfix16_En12
  SIGNAL decode_sel_Electrical_Position_1_1 : std_logic;  -- ufix1
  SIGNAL reg_enb_Electrical_Position_1_1  : std_logic;  -- ufix1
  SIGNAL data_in_Electrical_Position      : signed(15 DOWNTO 0);  -- sfix16_En12
  SIGNAL data_reg_Electrical_Position_1_1 : signed(15 DOWNTO 0);  -- sfix16_En12
  SIGNAL decode_sel_Phase_Current         : std_logic;  -- ufix1
  SIGNAL strobe_sel_Phase_Current         : std_logic;  -- ufix1
  SIGNAL const_zero_1                     : std_logic;  -- ufix1
  SIGNAL strobe_in_Phase_Current          : std_logic;  -- ufix1
  SIGNAL strobe_sw_Phase_Current          : std_logic;  -- ufix1
  SIGNAL decode_sel_Phase_Current_1_1     : std_logic;  -- ufix1
  SIGNAL reg_enb_Phase_Current_1_1        : std_logic;  -- ufix1
  SIGNAL data_in_Phase_Current            : signed(15 DOWNTO 0);  -- sfix16_En12
  SIGNAL decode_sel_Phase_Current_2_1     : std_logic;  -- ufix1
  SIGNAL reg_enb_Phase_Current_2_1        : std_logic;  -- ufix1
  SIGNAL strobe_reg_Phase_Current         : std_logic;  -- ufix1
  SIGNAL data_reg_Phase_Current_1_1       : signed(15 DOWNTO 0);  -- sfix16_En12
  SIGNAL data_reg_Phase_Current_2_1       : signed(15 DOWNTO 0);  -- sfix16_En12
  SIGNAL write_reg_Phase_Current          : vector_of_signed16(0 TO 1);  -- sfix16_En12 [2]
  SIGNAL sync_reg_Phase_Current_1         : vector_of_signed16(0 TO 1);  -- sfix16_En12 [2]

BEGIN
  addr_sel_unsigned <= unsigned(addr_sel);

  
  decode_sel_ip_timestamp_1_1 <= '1' WHEN addr_sel_unsigned = to_unsigned(16#0002#, 14) ELSE
      '0';

  read_ip_timestamp_unsigned <= unsigned(read_ip_timestamp);

  const_1 <= '1';

  enb <= const_1;

  
  decode_sel_Phase_Voltage_1_1 <= '1' WHEN addr_sel_unsigned = to_unsigned(16#0048#, 14) ELSE
      '0';

  const_0 <= to_unsigned(0, 32);

  reg_ip_timestamp_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        read_reg_ip_timestamp <= to_unsigned(0, 32);
      ELSIF enb = '1' THEN
        read_reg_ip_timestamp <= read_ip_timestamp_unsigned;
      END IF;
    END IF;
  END PROCESS reg_ip_timestamp_process;


  
  decode_rd_ip_timestamp_1_1 <= const_0 WHEN decode_sel_ip_timestamp_1_1 = '0' ELSE
      read_reg_ip_timestamp;

  
  decode_sel_Phase_Voltage <= '1' WHEN addr_sel_unsigned = to_unsigned(16#004C#, 14) ELSE
      '0';

  strobe_sel_Phase_Voltage <= decode_sel_Phase_Voltage AND wr_enb;

  const_zero <= '0';

  data_write_unsigned <= unsigned(data_write);

  strobe_in_Phase_Voltage <= data_write_unsigned(0);

  
  strobe_sw_Phase_Voltage <= const_zero WHEN strobe_sel_Phase_Voltage = '0' ELSE
      strobe_in_Phase_Voltage;

  reg_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        strobe_reg_Phase_Voltage <= '0';
      ELSIF enb = '1' THEN
        strobe_reg_Phase_Voltage <= strobe_sw_Phase_Voltage;
      END IF;
    END IF;
  END PROCESS reg_process;


  read_Phase_Voltage(0) <= signed(read_Phase_Voltage_0);
  read_Phase_Voltage(1) <= signed(read_Phase_Voltage_1);
  read_Phase_Voltage(2) <= signed(read_Phase_Voltage_2);

  reg_Phase_Voltage_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        sync_reg_Phase_Voltage <= (OTHERS => to_signed(16#0000#, 16));
      ELSIF enb = '1' AND strobe_reg_Phase_Voltage = '1' THEN
        sync_reg_Phase_Voltage <= read_Phase_Voltage;
      END IF;
    END IF;
  END PROCESS reg_Phase_Voltage_process;



  data_slice_Phase_Voltage_1_gen: FOR ii IN 0 TO 2 GENERATE
    dtc_cast(ii) <= unsigned(resize(sync_reg_Phase_Voltage(ii), 32));
    data_slice_Phase_Voltage_1(ii) <= dtc_cast(ii);
  END GENERATE data_slice_Phase_Voltage_1_gen;


  
  decode_sel_Phase_Voltage_1_2 <= '1' WHEN addr_sel_unsigned = to_unsigned(16#0049#, 14) ELSE
      '0';

  data_slice_Phase_Voltage_1_0 <= data_slice_Phase_Voltage_1(0);

  
  decode_rd_Phase_Voltage_1_1 <= decode_rd_ip_timestamp_1_1 WHEN decode_sel_Phase_Voltage_1_1 = '0' ELSE
      data_slice_Phase_Voltage_1_0;

  
  decode_sel_Phase_Voltage_1_3 <= '1' WHEN addr_sel_unsigned = to_unsigned(16#004A#, 14) ELSE
      '0';

  data_slice_Phase_Voltage_1_1 <= data_slice_Phase_Voltage_1(1);

  
  decode_rd_Phase_Voltage_1_2 <= decode_rd_Phase_Voltage_1_1 WHEN decode_sel_Phase_Voltage_1_2 = '0' ELSE
      data_slice_Phase_Voltage_1_1;

  data_slice_Phase_Voltage_1_2 <= data_slice_Phase_Voltage_1(2);

  
  decode_rd_Phase_Voltage_1_3 <= decode_rd_Phase_Voltage_1_2 WHEN decode_sel_Phase_Voltage_1_3 = '0' ELSE
      data_slice_Phase_Voltage_1_2;

  data_read <= std_logic_vector(decode_rd_Phase_Voltage_1_3);

  
  decode_sel_axi_enable_1_1 <= '1' WHEN addr_sel_unsigned = to_unsigned(16#0001#, 14) ELSE
      '0';

  reg_enb_axi_enable_1_1 <= decode_sel_axi_enable_1_1 AND wr_enb;

  data_in_axi_enable <= data_write_unsigned(0);

  reg_axi_enable_1_1_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        data_reg_axi_enable_1_1 <= '1';
      ELSIF enb = '1' AND reg_enb_axi_enable_1_1 = '1' THEN
        data_reg_axi_enable_1_1 <= data_in_axi_enable;
      END IF;
    END IF;
  END PROCESS reg_axi_enable_1_1_process;


  write_concats_axi_enable_1 <= data_reg_axi_enable_1_1;

  write_axi_enable <= write_concats_axi_enable_1;

  
  decode_sel_Current_Command_1_1 <= '1' WHEN addr_sel_unsigned = to_unsigned(16#0040#, 14) ELSE
      '0';

  reg_enb_Current_Command_1_1 <= decode_sel_Current_Command_1_1 AND wr_enb;

  data_in_Current_Command <= signed(data_write_unsigned(15 DOWNTO 0));

  reg_Current_Command_1_1_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        data_reg_Current_Command_1_1 <= to_signed(16#0000#, 16);
      ELSIF enb = '1' AND reg_enb_Current_Command_1_1 = '1' THEN
        data_reg_Current_Command_1_1 <= data_in_Current_Command;
      END IF;
    END IF;
  END PROCESS reg_Current_Command_1_1_process;


  write_Current_Command <= std_logic_vector(data_reg_Current_Command_1_1);

  
  decode_sel_Electrical_Position_1_1 <= '1' WHEN addr_sel_unsigned = to_unsigned(16#0041#, 14) ELSE
      '0';

  reg_enb_Electrical_Position_1_1 <= decode_sel_Electrical_Position_1_1 AND wr_enb;

  data_in_Electrical_Position <= signed(data_write_unsigned(15 DOWNTO 0));

  reg_Electrical_Position_1_1_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        data_reg_Electrical_Position_1_1 <= to_signed(16#0000#, 16);
      ELSIF enb = '1' AND reg_enb_Electrical_Position_1_1 = '1' THEN
        data_reg_Electrical_Position_1_1 <= data_in_Electrical_Position;
      END IF;
    END IF;
  END PROCESS reg_Electrical_Position_1_1_process;


  write_Electrical_Position <= std_logic_vector(data_reg_Electrical_Position_1_1);

  
  decode_sel_Phase_Current <= '1' WHEN addr_sel_unsigned = to_unsigned(16#0044#, 14) ELSE
      '0';

  strobe_sel_Phase_Current <= decode_sel_Phase_Current AND wr_enb;

  const_zero_1 <= '0';

  strobe_in_Phase_Current <= data_write_unsigned(0);

  
  strobe_sw_Phase_Current <= const_zero_1 WHEN strobe_sel_Phase_Current = '0' ELSE
      strobe_in_Phase_Current;

  
  decode_sel_Phase_Current_1_1 <= '1' WHEN addr_sel_unsigned = to_unsigned(16#0042#, 14) ELSE
      '0';

  reg_enb_Phase_Current_1_1 <= decode_sel_Phase_Current_1_1 AND wr_enb;

  data_in_Phase_Current <= signed(data_write_unsigned(15 DOWNTO 0));

  
  decode_sel_Phase_Current_2_1 <= '1' WHEN addr_sel_unsigned = to_unsigned(16#0043#, 14) ELSE
      '0';

  reg_enb_Phase_Current_2_1 <= decode_sel_Phase_Current_2_1 AND wr_enb;

  reg_1_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        strobe_reg_Phase_Current <= '0';
      ELSIF enb = '1' THEN
        strobe_reg_Phase_Current <= strobe_sw_Phase_Current;
      END IF;
    END IF;
  END PROCESS reg_1_process;


  reg_Phase_Current_1_1_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        data_reg_Phase_Current_1_1 <= to_signed(16#0000#, 16);
      ELSIF enb = '1' AND reg_enb_Phase_Current_1_1 = '1' THEN
        data_reg_Phase_Current_1_1 <= data_in_Phase_Current;
      END IF;
    END IF;
  END PROCESS reg_Phase_Current_1_1_process;


  reg_Phase_Current_2_1_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        data_reg_Phase_Current_2_1 <= to_signed(16#0000#, 16);
      ELSIF enb = '1' AND reg_enb_Phase_Current_2_1 = '1' THEN
        data_reg_Phase_Current_2_1 <= data_in_Phase_Current;
      END IF;
    END IF;
  END PROCESS reg_Phase_Current_2_1_process;


  write_reg_Phase_Current(0) <= data_reg_Phase_Current_1_1;
  write_reg_Phase_Current(1) <= data_reg_Phase_Current_2_1;

  sync_reg_Phase_Current_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        sync_reg_Phase_Current_1 <= (OTHERS => to_signed(16#0000#, 16));
      ELSIF enb = '1' AND strobe_reg_Phase_Current = '1' THEN
        sync_reg_Phase_Current_1 <= write_reg_Phase_Current;
      END IF;
    END IF;
  END PROCESS sync_reg_Phase_Current_process;


  write_Phase_Current_0 <= std_logic_vector(sync_reg_Phase_Current_1(0));

  write_Phase_Current_1 <= std_logic_vector(sync_reg_Phase_Current_1(1));

END rtl;

